version: '3.8'

services:
  # PostgreSQL Database
  db:
    image: postgres:15-alpine
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-app}
      POSTGRES_USER: ${POSTGRES_USER:-app}
      POSTGRES_PASSWORD_FILE: /run/secrets/db_password
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    secrets:
      - db_password
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-app} -d ${POSTGRES_DB:-app}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis for RQ and caching
  redis:
    image: redis:7-alpine
    command: redis-server --requirepass ${REDIS_PASSWORD:-}
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    environment:
      - REDIS_PASSWORD=${REDIS_PASSWORD:-}
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Chroma Vector Database
  chroma:
    image: chromadb/chroma:latest
    environment:
      - CHROMA_SERVER_HOST=0.0.0.0
      - CHROMA_SERVER_HTTP_PORT=8001
      - CHROMA_SERVER_CORS_ALLOW_ORIGINS=["*"]
    ports:
      - "8001:8001"
    volumes:
      - chroma_data:/chroma/chroma
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8001/api/v1/heartbeat"]
      interval: 30s
      timeout: 10s
      retries: 3

  # FastAPI Backend
  api:
    build:
      context: .
      dockerfile: Dockerfile
    environment:
      - DATABASE_URL=postgresql+psycopg://${POSTGRES_USER:-app}:${POSTGRES_PASSWORD}@db:5432/${POSTGRES_DB:-app}
      - REDIS_URL=redis://:${REDIS_PASSWORD:-}@redis:6379/0
      - CHROMA_HOST=chroma
      - CHROMA_PORT=8001
      - OLLAMA_BASE_URL=${OLLAMA_BASE_URL:-http://host.docker.internal:11434}
      - JWT_SECRET_FILE=/run/secrets/jwt_secret
      - TENANT_DEFAULT=${TENANT_DEFAULT:-demo}
      - FILE_STORAGE_ROOT=/app/storage
      - TIMEZONE=${TIMEZONE:-UTC}
      - AI_FIRST_MODE=${AI_FIRST_MODE:-true}
      - AI_AUTOPUBLISH_DEFAULT=${AI_AUTOPUBLISH_DEFAULT:-false}
      - ENABLE_OCR=${ENABLE_OCR:-true}
      - SMTP_HOST=${SMTP_HOST:-}
      - SMTP_PORT=${SMTP_PORT:-587}
      - SMTP_USER=${SMTP_USER:-}
      - SMTP_PASS_FILE=/run/secrets/smtp_password
      - FROM_EMAIL=${FROM_EMAIL:-}
      - LEADERSHIP_EMAILS=${LEADERSHIP_EMAILS:-}
    volumes:
      - ./storage:/app/storage
      - ./data:/app/data
    ports:
      - "8000:8000"
    secrets:
      - jwt_secret
      - smtp_password
      - db_password
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
      chroma:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Background Worker
  worker:
    build:
      context: .
      dockerfile: Dockerfile
    command: ["python", "-m", "rq", "worker", "--url", "redis://:${REDIS_PASSWORD:-}@redis:6379/0"]
    environment:
      - DATABASE_URL=postgresql+psycopg://${POSTGRES_USER:-app}:${POSTGRES_PASSWORD}@db:5432/${POSTGRES_DB:-app}
      - REDIS_URL=redis://:${REDIS_PASSWORD:-}@redis:6379/0
      - CHROMA_HOST=chroma
      - CHROMA_PORT=8001
      - OLLAMA_BASE_URL=${OLLAMA_BASE_URL:-http://host.docker.internal:11434}
      - JWT_SECRET_FILE=/run/secrets/jwt_secret
      - TENANT_DEFAULT=${TENANT_DEFAULT:-demo}
      - FILE_STORAGE_ROOT=/app/storage
      - TIMEZONE=${TIMEZONE:-UTC}
      - AI_FIRST_MODE=${AI_FIRST_MODE:-true}
      - AI_AUTOPUBLISH_DEFAULT=${AI_AUTOPUBLISH_DEFAULT:-false}
      - ENABLE_OCR=${ENABLE_OCR:-true}
      - SMTP_HOST=${SMTP_HOST:-}
      - SMTP_PORT=${SMTP_PORT:-587}
      - SMTP_USER=${SMTP_USER:-}
      - SMTP_PASS_FILE=/run/secrets/smtp_password
      - FROM_EMAIL=${FROM_EMAIL:-}
      - LEADERSHIP_EMAILS=${LEADERSHIP_EMAILS:-}
    volumes:
      - ./storage:/app/storage
      - ./data:/app/data
    secrets:
      - jwt_secret
      - smtp_password
      - db_password
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
      chroma:
        condition: service_healthy

  # Nginx for serving static files and reverse proxy
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
      - ./web/static:/usr/share/nginx/html/static
      - ./web/templates:/usr/share/nginx/html/templates
      - ./ssl:/etc/nginx/ssl
    depends_on:
      - api
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

volumes:
  postgres_data:
  redis_data:
  chroma_data:

secrets:
  jwt_secret:
    file: ./secrets/jwt_secret.txt
  smtp_password:
    file: ./secrets/smtp_password.txt
  db_password:
    file: ./secrets/db_password.txt
