# Enterprise Management System POC

A comprehensive Proof of Concept (POC) application demonstrating enterprise-level functionality including file operations, sales management, employee performance tracking, weather API integration, and automated email reporting.

## üöÄ Features

### 1. File Operations
- **Read/Write to any location**: Full file system access with directory creation
- **Cross-platform compatibility**: Works on Windows, macOS, and Linux
- **Error handling**: Robust error handling for file operations

### 2. SQLite Database Management
- **Sales Data**: Comprehensive sales data for all 4 quarters
- **Employee Performance**: Detailed employee performance metrics
- **Automated data generation**: Dummy data creation for testing
- **Real-time analytics**: Dynamic data visualization

### 3. Sales Management
- **Quarterly reports**: Detailed sales analysis by quarter
- **Product performance**: Track sales by product category
- **Regional analysis**: Sales performance by region
- **Interactive charts**: Visual data representation using Plotly

### 4. Weather API Integration
- **Real-time weather data**: Using wttr.in API
- **Global location support**: Any city worldwide
- **Comprehensive weather info**: Temperature, humidity, wind speed, conditions

### 5. Employee Performance Management
- **Performance tracking**: Hours worked, tasks completed, quality scores
- **Quarterly assessments**: Performance analysis by quarter
- **Goal setting**: Automated recommendations for improvement
- **Skill development**: Suggestions for skill upliftment

### 6. Email Reporting System
- **Automated reports**: Generate and send reports via email
- **Sales reports**: Comprehensive quarterly sales analysis
- **Employee reports**: Individual performance reports with recommendations
- **Professional formatting**: Well-structured email content

### 7. Professional Streamlit UI
- **Modern design**: Clean, professional interface
- **Responsive layout**: Wide layout with sidebar navigation
- **Interactive components**: Tabs, charts, forms, and data tables
- **Real-time updates**: Dynamic data visualization

## üìã Requirements

- Python 3.8+
- Virtual environment (recommended)
- Internet connection (for weather API and package installation)

## üõ†Ô∏è Installation

1. **Clone or download the project files**

2. **Create a virtual environment** (recommended):
   ```bash
   python -m venv .venv
   source .venv/bin/activate  # On Windows: .venv\Scripts\activate
   ```

3. **Install dependencies**:
   ```bash
   pip install -r requirements.txt
   ```

## üöÄ Running the Application

1. **Start the Streamlit application**:
   ```bash
   streamlit run streamlit_app.py
   ```

2. **Open your browser** and navigate to the URL shown in the terminal (typically `http://localhost:8501`)

## üìä Application Modules

### Dashboard
- Overview of key metrics
- Sales and employee performance charts
- Real-time data visualization

### File Operations
- **Write File**: Create files in any directory
- **Read File**: Read content from any file location
- **Directory Creation**: Automatic directory creation if needed

### Sales Management
- **Quarter Selection**: Filter data by quarter (Q1-Q4)
- **Sales Analytics**: Comprehensive sales analysis
- **Visual Charts**: Pie charts and bar graphs
- **Data Tables**: Detailed sales data view

### Weather API
- **Location Input**: Enter any city name
- **Real-time Data**: Current weather conditions
- **Multiple Metrics**: Temperature, humidity, wind speed, conditions

### Employee Performance
- **Performance Metrics**: Hours, tasks, quality scores
- **Quarterly Analysis**: Performance by quarter
- **Visual Analytics**: Scatter plots and charts
- **Detailed Data**: Complete employee information

### Email Reports
- **Sales Reports**: Generate and send quarterly sales reports
- **Employee Reports**: Individual performance reports with recommendations
- **Email Integration**: Simulated email sending functionality

## üóÑÔ∏è Database Schema

### Sales Data Table
```sql
CREATE TABLE sales_data (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    quarter TEXT,
    product_name TEXT,
    region TEXT,
    sales_amount REAL,
    units_sold INTEGER,
    date TEXT
);
```

### Employee Performance Table
```sql
CREATE TABLE employee_performance (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    employee_id TEXT,
    employee_name TEXT,
    project_name TEXT,
    hours_worked REAL,
    tasks_completed INTEGER,
    quality_score REAL,
    quarter TEXT,
    date TEXT
);
```

## üìà Sample Data

The application automatically generates sample data including:
- **200 sales records** (50 per quarter)
- **5 employees** with performance data for all quarters
- **5 products**: Laptop, Smartphone, Tablet, Monitor, Keyboard
- **5 regions**: North, South, East, West, Central

## üéØ Leadership Presentation Features

### Professional UI
- Clean, modern interface suitable for executive presentations
- Professional color scheme and typography
- Responsive design that works on different screen sizes

### Comprehensive Analytics
- Real-time dashboard with key performance indicators
- Interactive charts and visualizations
- Exportable reports and data

### Enterprise Features
- Database management with SQLite
- File system operations
- API integrations
- Email automation
- Performance tracking

### Scalable Architecture
- Modular design for easy extension
- Clean code structure
- Comprehensive error handling
- Documentation and comments

## üîß Configuration

### Email Settings
To enable actual email sending, modify the `send_email_report` method in `streamlit_app.py`:

```python
# Configure SMTP settings
smtp_server = "smtp.gmail.com"
smtp_port = 587
sender_email = "your-email@gmail.com"
sender_password = "your-app-password"

# Send email
server = smtplib.SMTP(smtp_server, smtp_port)
server.starttls()
server.login(sender_email, sender_password)
server.send_message(msg)
server.quit()
```

### Database Configuration
The SQLite database (`enterprise_data.db`) is automatically created when the application starts. To reset the data, simply delete the database file.

## üö® Troubleshooting

### Common Issues

1. **Port already in use**:
   ```bash
   streamlit run streamlit_app.py --server.port 8502
   ```

2. **Package installation errors**:
   ```bash
   pip install --upgrade pip
   pip install -r requirements.txt --force-reinstall
   ```

3. **Weather API errors**:
   - Check internet connection
   - Verify location spelling
   - Try different location names

4. **File permission errors**:
   - Ensure write permissions in target directory
   - Use absolute paths if needed

## üìù Development Notes

### Adding New Features
1. Extend the `EnterpriseManagementSystem` class
2. Add new UI components in the main function
3. Update the sidebar navigation
4. Add appropriate error handling

### Database Modifications
1. Modify the `init_database` method
2. Add new table creation scripts
3. Update data insertion methods
4. Modify query methods as needed

### UI Customization
1. Modify the CSS in the `st.markdown` section
2. Update page configuration
3. Customize charts and visualizations
4. Add new interactive components

## üìÑ License

This is a POC application for demonstration purposes. Feel free to modify and extend as needed for your specific use case.

## ü§ù Support

For questions or issues:
1. Check the troubleshooting section
2. Review the code comments
3. Verify all dependencies are installed
4. Ensure proper file permissions

---

**Note**: This POC demonstrates enterprise-level functionality and is suitable for leadership presentations. The application includes comprehensive error handling, professional UI design, and scalable architecture for future development. 